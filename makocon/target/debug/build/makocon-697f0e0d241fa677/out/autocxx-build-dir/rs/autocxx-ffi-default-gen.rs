# [allow (non_snake_case)] # [allow (dead_code)] # [allow (non_upper_case_globals)] # [allow (non_camel_case_types)] mod ffi { pub trait ToCppString { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > ; } impl ToCppString for & str { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (& self) } } impl ToCppString for & String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for cxx :: UniquePtr < cxx :: CxxString > { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { self } } unsafe impl cxx :: ExternType for bindgen :: root :: KVStore { type Id = cxx :: type_id ! ("KVStore") ; type Kind = cxx :: kind :: Opaque ; } mod bindgen { pub (super) mod root { # [repr (C , align (8))] pub struct KVStore { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : :: core :: cell :: UnsafeCell < :: core :: mem :: MaybeUninit < [u8 ; 104] > > } impl KVStore { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: KVStore_new_autocxx_autocxx_wrapper_0x2af6468c0a42d1cc (this) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: KVStore { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: KVStore { cxxbridge :: KVStore_autocxx_alloc_autocxx_wrapper_0x2af6468c0a42d1cc () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: KVStore) { cxxbridge :: KVStore_autocxx_free_autocxx_wrapper_0x2af6468c0a42d1cc (arg0) } } impl Drop for root :: KVStore { fn drop (self : & mut root :: KVStore) { unsafe { cxxbridge :: KVStore_destructor_autocxx_wrapper_0x2af6468c0a42d1cc (self) } } } # [allow (unused_imports)] use self :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: root ; } } # [cxx :: bridge] mod cxxbridge { impl UniquePtr < KVStore > { } impl SharedPtr < KVStore > { } impl WeakPtr < KVStore > { } unsafe extern "C++" { fn autocxx_make_string_0x2af6468c0a42d1cc (str_ : & str) -> UniquePtr < CxxString > ; pub unsafe fn KVStore_autocxx_alloc_autocxx_wrapper_0x2af6468c0a42d1cc () -> * mut KVStore ; pub unsafe fn KVStore_autocxx_free_autocxx_wrapper_0x2af6468c0a42d1cc (arg0 : * mut KVStore) ; # [cxx_name = "KVStore"] type KVStore = super :: bindgen :: root :: KVStore ; pub fn set (self : Pin < & mut KVStore > , key : & CxxString , value : & CxxString) ; pub fn get (self : & KVStore , key : & CxxString , value : Pin < & mut CxxString >) -> bool ; pub fn del (self : Pin < & mut KVStore > , key : & CxxString) -> bool ; pub unsafe fn KVStore_new_autocxx_autocxx_wrapper_0x2af6468c0a42d1cc (autocxx_gen_this : * mut KVStore) ; pub unsafe fn KVStore_destructor_autocxx_wrapper_0x2af6468c0a42d1cc (autocxx_gen_this : * mut KVStore) ; include ! ("kv_store.h") ; include ! ("autocxxgen_ffi.h") ; } extern "Rust" { } } # [allow (unused_imports)] use bindgen :: root ; pub use cxxbridge :: autocxx_make_string_0x2af6468c0a42d1cc as make_string ; # [allow (unused_imports)] pub use bindgen :: root :: KVStore ; }